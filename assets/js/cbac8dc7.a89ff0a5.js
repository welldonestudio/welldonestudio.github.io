"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[10],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(h,o(o({ref:t},p),{},{components:a})):r.createElement(h,o({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},81172:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=a(83117),n=a(80102),i=(a(67294),a(3905)),o=["components"],s={title:"Starknet Cairo Verification",description:"Starknet Cairo Smart Contract Verification",sidebar_position:10},l="Starknet Cairo Verification",c={unversionedId:"tutorials/starknet-cairo-verification/index",id:"tutorials/starknet-cairo-verification/index",title:"Starknet Cairo Verification",description:"Starknet Cairo Smart Contract Verification",source:"@site/docs/tutorials/starknet-cairo-verification/index.md",sourceDirName:"tutorials/starknet-cairo-verification",slug:"/tutorials/starknet-cairo-verification/",permalink:"/tutorials/starknet-cairo-verification/",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/tutorials/starknet-cairo-verification/index.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Starknet Cairo Verification",description:"Starknet Cairo Smart Contract Verification",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Arbitrum Stylus Gas Efficiency Test",permalink:"/tutorials/arbitrum-stylus-benchmark/"},next:{title:"Analysis of Latest Arbitrum Stylus SDK Improvements",permalink:"/tutorials/arbitrum-stylus/arbitrum-stylus-sdk-improvements"}},p={},u=[{value:"Starknet",id:"starknet",level:2},{value:"Starknet Transaction Lifecycle",id:"starknet-transaction-lifecycle",level:2},{value:"Cairo Language",id:"cairo-language",level:2},{value:"How to verify Cairo Smart Contract?",id:"how-to-verify-cairo-smart-contract",level:2},{value:"Why do we need to verify two hash values?",id:"why-do-we-need-to-verify-two-hash-values",level:3},{value:"Reference",id:"reference",level:3}],d={toc:u};function m(e){var t=e.components,s=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"starknet-cairo-verification"},"Starknet Cairo Verification"),(0,i.kt)("div",null,(0,i.kt)("span",{className:"author-sm"},"Oct 8, 2024"),(0,i.kt)("div",{className:"author-div"},(0,i.kt)("div",{className:"author-avatars"},(0,i.kt)("a",{href:"https://github.com/inchori",target:"_blank"},(0,i.kt)("img",{src:"https://avatars.githubusercontent.com/u/49394875?v=4"}))),(0,i.kt)("div",null,(0,i.kt)("span",{className:"author-name"},"Inchul Song"),(0,i.kt)("br",null),(0,i.kt)("span",{className:"author-sm"},"Software Engineer, DSRV ")))),(0,i.kt)("h2",{id:"starknet"},"Starknet"),(0,i.kt)("p",null,"Starknet is an Ethereum L2 chain that provides Validity-Rollup. Validity-Rollup is also known as Zero-Knowledge Rollup (ZK-Rollup)."),(0,i.kt)("p",null,"Starknet is composed of the following components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sequencer: The sequencer receives transactions generated by the L2 and generates L2 blocks. It is responsible for sending the generated L2 blocks to the Prover."),(0,i.kt)("li",{parentName:"ul"},"Prover: The Prover receives the generated blocks and transactions from the Sequencer and verifies them. After executing the proof program with the Cairo VM of Starknet OS, it generates a STARK proof and sends it to the L1 chain."),(0,i.kt)("li",{parentName:"ul"},"L1 (Ethereum): Validates the STARK proof and, if valid, updates the Starknet state root of L1.")),(0,i.kt)("h2",{id:"starknet-transaction-lifecycle"},"Starknet Transaction Lifecycle"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"starknet-tx-lifecycle",src:a(91655).Z,title:"starknet-tx-lifecycle",width:"972",height:"432"})),(0,i.kt)("p",null,"The transaction lifecycle on Starknet proceeds in the following order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Transaction submission: The transaction is submitted to one Sequencer and marked with the status ",(0,i.kt)("inlineCode",{parentName:"li"},"RECEVIED"),"."),(0,i.kt)("li",{parentName:"ol"},"Mempool validation: The transaction is validated in the Mempool and checked for the following cases.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The current account balance exceeds ",(0,i.kt)("inlineCode",{parentName:"li"},"max_fee"),"."),(0,i.kt)("li",{parentName:"ul"},"Whether the transaction's calldata exceeds the limit."))),(0,i.kt)("li",{parentName:"ol"},"Sequencer validation: Sequencer performs preliminary validation before executing the transaction."),(0,i.kt)("li",{parentName:"ol"},"Execution: Sequencer executes all transactions that pass preliminary validation sequentially. If successful, the transaction is marked with the status ",(0,i.kt)("inlineCode",{parentName:"li"},"ACCEPTED_ON_L2"),". If the transaction fails during execution, it is marked as ",(0,i.kt)("inlineCode",{parentName:"li"},"REVERTED"),"."),(0,i.kt)("li",{parentName:"ol"},"Proof generation and verification: The Prover runs the operating system in a new block, computes the proof, and sends it to the L1 validator. If the proof passes verification on L1, it is marked as ",(0,i.kt)("inlineCode",{parentName:"li"},"ACCEPTED_ON_L1"),".")),(0,i.kt)("h2",{id:"cairo-language"},"Cairo Language"),(0,i.kt)("p",null,"The Cairo language is a smart contract language for Starknet, a programming language designed for virtual CPUs. Because the Cairo language is built for cryptographic constraints, not physical ones, it can efficiently prove the execution of any program."),(0,i.kt)("p",null,"While Cairo 0 was compiled directly into CASM (Cairo Assembly), Cairo 1 is a high-level language that is first compiled into Sierra. Sierra (Safe Intermediate Representation) is an intermediate representation between Cairo and CASM that is later compiled into a safe subset of CASM. The resulting compiled CASM code is eventually executed by the Cairo VM on the Starknet OS and generates a STARK proof, which is sent to L1."),(0,i.kt)("p",null,"You can read more about Cairo, Sierra, and CASM in these ",(0,i.kt)("a",{parentName:"p",href:"https://docs.starknet.io/architecture-and-concepts/smart-contracts/cairo-and-sierra/"},"documents"),"."),(0,i.kt)("p",null,"Example code for the Cairo language looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="simple_storage.cairo"',title:'"simple_storage.cairo"'},"#[starknet::interface]\ntrait ISimpleStorage<TContractState> {\n    fn set(ref self: TContractState, x: u128);\n    fn get(self: @TContractState) -> u128;\n}\n\n#[starknet::contract]\nmod simple_storage {\n    use starknet::get_caller_address;\n    use starknet::ContractAddress;\n\n    #[storage]\n    struct Storage {\n        stored_data: u128\n    }\n\n    #[abi(embed_v0)]\n    impl SimpleStorage of super::ISimpleStorage<ContractState> {\n        fn set(ref self: ContractState, x: u128) {\n            self.stored_data.write(x);\n        }\n        fn get(self: @ContractState) -> u128 {\n            self.stored_data.read()\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"how-to-verify-cairo-smart-contract"},"How to verify Cairo Smart Contract?"),(0,i.kt)("p",null,"The above ",(0,i.kt)("inlineCode",{parentName:"p"},"simple_storage.cairo")," can be verified using WELLDONE Studio's ",(0,i.kt)("a",{parentName:"p",href:"https://veriwell.dev/"},"VeriWell"),". To deploy a smart contract written in Cairo, you can refer to the Starknet ",(0,i.kt)("a",{parentName:"p",href:"https://docs.starknet.io/quick-start/environment-setup/"},"documentation")," for deployment. Once deployed, you can check that it was deployed correctly with ",(0,i.kt)("a",{parentName:"p",href:"https://starkscan.co/"},"Starkscan")," or ",(0,i.kt)("a",{parentName:"p",href:"https://voyager.online/"},"Nethermind Voyager Explorer"),"."),(0,i.kt)("p",null,"To verify a Cairo smart contract using the Multi-chain Verification Tool, a total of five pieces of information are required:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Contract Address: Deployed smart contract address"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"DECLARE")," Transaction Hash: Declare transaction hash is required because there is a need to verify not only ",(0,i.kt)("inlineCode",{parentName:"li"},"class_hash")," but also ",(0,i.kt)("inlineCode",{parentName:"li"},"compiled_class_hash"),". In the future, we will remove the ",(0,i.kt)("inlineCode",{parentName:"li"},"DECLARE")," transaction hash."),(0,i.kt)("li",{parentName:"ol"},"Scarb Version: Scarb is a Cairo package manager that compiles Cairo projects. It depends on the compiler version to ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/starkware-libs/cairo/blob/410069c5745800bab4fbd2f0f4ff0bbfc59209d6/crates/cairo-lang-starknet-classes/src/contract_class.rs#L49"},"compile"),", so it is important to specify it."),(0,i.kt)("li",{parentName:"ol"},"Chain ID: To differentiate between Mainnet (",(0,i.kt)("inlineCode",{parentName:"li"},"0x534e5f4d41494e"),") and Sepolia (",(0,i.kt)("inlineCode",{parentName:"li"},"0x534e5f5345504f4c4941"),")"),(0,i.kt)("li",{parentName:"ol"},"Cairo project source code")),(0,i.kt)("p",null,"In order to validate Cairo, you must add the following config to ",(0,i.kt)("inlineCode",{parentName:"p"},"Scarb.toml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},"[[target.starknet-contract]]\ncasm = true\nsierra = true\n")),(0,i.kt)("p",null,"The Cairo project structure is as follows (assuming a ",(0,i.kt)("inlineCode",{parentName:"p"},"DECLARE")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DEPLOY")," to the network):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},"\u251c\u2500\u2500 Scarb.lock\n\u251c\u2500\u2500 Scarb.toml\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 lib.cairo\n\u2502\xa0\xa0 \u2514\u2500\u2500 simple_storage.cairo\n\u2514\u2500\u2500 target\n    \u251c\u2500\u2500 CACHEDIR.TAG\n    \u2514\u2500\u2500 dev\n        \u251c\u2500\u2500 simple_storage.starknet_artifacts.json\n        \u251c\u2500\u2500 simple_storage_simple_storage.compiled_contract_class.json\n        \u2514\u2500\u2500 simple_storage_simple_storage.contract_class.json\n")),(0,i.kt)("p",null,"When you request verification from Multi-chain Verification Tool ",(0,i.kt)("inlineCode",{parentName:"p"},"/starknet/verifications")," API, which will be released later, it compiles the code according to the compiler version, computes ",(0,i.kt)("inlineCode",{parentName:"p"},"class_hash")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"compiled_class_hash"),", and compares the class hash value of the Starknet network with the compiled class hash value."),(0,i.kt)("h3",{id:"why-do-we-need-to-verify-two-hash-values"},"Why do we need to verify two hash values?"),(0,i.kt)("p",null,"To validate a smart contract written in Solidity on Ethereum, we compare one compiled bytecode result to the bytecode on the network. However, Starknet compares not one, but two hash values: ",(0,i.kt)("inlineCode",{parentName:"p"},"class_hash")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"compiled_class_hash"),". ",(0,i.kt)("a",{parentName:"p",href:"https://docs.starknet.io/architecture-and-concepts/smart-contracts/class-hash/"},"Class hash")," and ",(0,i.kt)("a",{parentName:"p",href:"https://docs.starknet.io/architecture-and-concepts/smart-contracts/compiled-class-hash/"},"Compiled class hash")," are covered in detail in this document."),(0,i.kt)("p",null,"When a user sends a ",(0,i.kt)("inlineCode",{parentName:"p"},"DECLARE")," transaction, both the ",(0,i.kt)("inlineCode",{parentName:"p"},"class_hash")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"compiled_class_hash")," are signed simultaneously. Sequencer performs a Sierra \u2192 CASM compilation and compares the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"compiled_class_hash")," to the user-signed ",(0,i.kt)("inlineCode",{parentName:"p"},"compiled_class_hash"),". If the sequencer is malicious, it also compares the ",(0,i.kt)("inlineCode",{parentName:"p"},"compiled_class_hash")," value because it can get classes declared by CASM that are not related to Sierra."),(0,i.kt)("h3",{id:"reference"},"Reference"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.starknet.io/"},"https://docs.starknet.io/"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/"},"https://www.cairo-lang.org/"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"https://book.cairo-lang.org/"},"https://book.cairo-lang.org/"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/starkware-libs/cairo"},"https://github.com/starkware-libs/cairo")))}m.isMDXComponent=!0},91655:function(e,t,a){t.Z=a.p+"assets/images/starknet-tx-lifecycle-d146fee3bb52862b8fa41b4e207a1927.png"}}]);